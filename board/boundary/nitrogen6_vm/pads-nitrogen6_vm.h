/*
 * Copyright (C) 2013, Boundary Devices <info@boundarydevices.com>
 *
 * SPDX-License-Identifier:	GPL-2.0+
 */

#undef MX6PAD
#undef MX6NAME

#ifdef FOR_DL_SOLO
#define MX6PAD(a) MX6DL_PAD_##a
#define MX6NAME(a) mx6dl_solo_##a
#else
#define MX6PAD(a) MX6Q_PAD_##a
#define MX6NAME(a) mx6q_##a
#endif


#define AUD_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_40ohm |			\
	PAD_CTL_HYS | PAD_CTL_SRE_FAST)

#define CSI_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
	PAD_CTL_HYS | PAD_CTL_SRE_FAST)

#define UART_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
	PAD_CTL_HYS | PAD_CTL_SRE_FAST)

#define USDHC_CLK_PAD_CTRL (PAD_CTL_SPEED_LOW | PAD_CTL_DSE_40ohm | \
	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)

#define USDHC_PAD_CTRL (USDHC_CLK_PAD_CTRL | PAD_CTL_PUS_47K_UP)

#define ENET_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)

#define SPI_PAD_CTRL (PAD_CTL_HYS | PAD_CTL_SPEED_MED |		\
	PAD_CTL_DSE_40ohm     | PAD_CTL_SRE_FAST)

#define BUTTON_PAD_CTRL (PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)

#define I2C_PAD_CTRL	(PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |	\
	PAD_CTL_ODE | PAD_CTL_SRE_FAST)

#define WEAK_PULLUP	(PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |	\
	PAD_CTL_SRE_SLOW)

#define WEAK_PULLUP_OUTPUT (PAD_CTL_PUS_100K_UP |		\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_SRE_SLOW)

#define WEAK_PULLDN	(PAD_CTL_PUS_100K_DOWN |		\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
	PAD_CTL_HYS | PAD_CTL_SRE_SLOW)

#define WEAK_PULLDN_OUTPUT (PAD_CTL_PUS_100K_DOWN |		\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |	PAD_CTL_SRE_SLOW)

#define CEC_PAD_CTRL	(PAD_CTL_HYS | PAD_CTL_PUS_22K_UP | PAD_CTL_ODE | \
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_SRE_FAST)

#define OUTPUT_40OHM (PAD_CTL_SPEED_MED|PAD_CTL_DSE_40ohm)

#define HIGH_Z_SLOW (PAD_CTL_HYS|PAD_CTL_SPEED_LOW|PAD_CTL_DSE_DISABLE)

static const iomux_v3_cfg_t MX6NAME(nitrogen6_vm_pads)[] = {
	/* AUDMUX */
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT7__AUD3_RXD), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT4__AUD3_TXC), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT5__AUD3_TXD), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT6__AUD3_TXFS), AUD_PAD_CTRL),

	/* ECSPI1 */
	NEW_PAD_CTRL(MX6PAD(EIM_D17__ECSPI1_MISO), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D18__ECSPI1_MOSI), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D16__ECSPI1_SCLK), SPI_PAD_CTRL),
#define GP_ECSPI1_CS1	IMX_GPIO_NR(3, 19)
	NEW_PAD_CTRL(MX6PAD(EIM_D19__GPIO3_IO19), WEAK_PULLUP), /* SS1 */

	/* ENET pads that don't change for PHY reset */
	NEW_PAD_CTRL(MX6PAD(ENET_MDIO__ENET_MDIO), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(ENET_MDC__ENET_MDC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TXC__RGMII_TXC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD0__RGMII_TD0), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD1__RGMII_TD1), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD2__RGMII_TD2), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD3__RGMII_TD3), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TX_CTL__RGMII_TX_CTL), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(ENET_REF_CLK__ENET_TX_CLK), ENET_PAD_CTRL),
	/* pin 42 PHY nRST */
#define GP_ENET_PHY_RESET	IMX_GPIO_NR(1, 27)
	NEW_PAD_CTRL(MX6PAD(ENET_RXD0__GPIO1_IO27), OUTPUT_40OHM),
#define GP_ENET_PHY_INT		IMX_GPIO_NR(1, 28)
	NEW_PAD_CTRL(MX6PAD(ENET_TX_EN__GPIO1_IO28), WEAK_PULLUP),	/* Micrel RGMII Phy Interrupt */

	/* GPIO_KEYS */
#define GP_HOME			IMX_GPIO_NR(1, 2)
	NEW_PAD_CTRL(MX6PAD(GPIO_2__GPIO1_IO02), WEAK_PULLUP),
#define GP_BACK			IMX_GPIO_NR(1, 3)
	NEW_PAD_CTRL(MX6PAD(GPIO_3__GPIO1_IO03), WEAK_PULLUP),

	/* I2C3 */
#define GP_TOUCH_IRQ		IMX_GPIO_NR(1, 9)
	NEW_PAD_CTRL(MX6PAD(GPIO_9__GPIO1_IO09), WEAK_PULLUP),
#define GP_AR1021_5_WIRE_SEL	IMX_GPIO_NR(5, 2)
	NEW_PAD_CTRL(MX6PAD(EIM_A25__GPIO5_IO02), HIGH_Z_SLOW),

	/* LVDS */
#define GP_LVDS_EN		IMX_GPIO_NR(7, 12)
	NEW_PAD_CTRL(MX6PAD(GPIO_17__GPIO7_IO12), WEAK_PULLUP),		/* J39 - pin 19, DISP0_CONTRAST */

	/* LEDS */
#define GP_VM_GPIO_1		IMX_GPIO_NR(4, 6)
	NEW_PAD_CTRL(MX6PAD(KEY_COL0__GPIO4_IO06), WEAK_PULLUP),
#define GP_VM_GPIO_2		IMX_GPIO_NR(4, 7)
	NEW_PAD_CTRL(MX6PAD(KEY_ROW0__GPIO4_IO07), WEAK_PULLUP),
#define GP_VM_GPIO_3		IMX_GPIO_NR(4, 8)
	NEW_PAD_CTRL(MX6PAD(KEY_COL1__GPIO4_IO08), WEAK_PULLUP),
#define GP_VM_GPIO_4		IMX_GPIO_NR(4, 9)
	NEW_PAD_CTRL(MX6PAD(KEY_ROW1__GPIO4_IO09), WEAK_PULLUP),
#define GP_VM_GPIO_5		IMX_GPIO_NR(4, 10)
	NEW_PAD_CTRL(MX6PAD(KEY_COL2__GPIO4_IO10), WEAK_PULLUP),
#define GP_VM_GPIO_6		IMX_GPIO_NR(4, 11)
	NEW_PAD_CTRL(MX6PAD(KEY_ROW2__GPIO4_IO11), WEAK_PULLUP),
#define GP_VM_GPIO_7		IMX_GPIO_NR(4, 15)
	NEW_PAD_CTRL(MX6PAD(KEY_ROW4__GPIO4_IO15), WEAK_PULLUP),
#define GP_VM_GPIO_8		IMX_GPIO_NR(1, 4)
	NEW_PAD_CTRL(MX6PAD(GPIO_4__GPIO1_IO04), WEAK_PULLUP),

	/* PWM1 */
#define GP_PWM1			IMX_GPIO_NR(1, 21)
	NEW_PAD_CTRL(MX6PAD(SD1_DAT3__GPIO1_IO21), WEAK_PULLDN_OUTPUT),

	/* PWM3 */
#define GP_RGB_BACKLIGHT	IMX_GPIO_NR(1, 17)
	NEW_PAD_CTRL(MX6PAD(SD1_DAT1__GPIO1_IO17), WEAK_PULLDN_OUTPUT),

	/* PWM4 */
#define GP_LVDS_BACKLIGHT	IMX_GPIO_NR(1, 18)
	NEW_PAD_CTRL(MX6PAD(SD1_CMD__GPIO1_IO18), WEAK_PULLDN_OUTPUT),

	/* rtc - i2c2 */
#define GP_RTC_IRQ		IMX_GPIO_NR(2, 26)
	NEW_PAD_CTRL(MX6PAD(EIM_RW__GPIO2_IO26), WEAK_PULLUP),

	/* SGTL5000 */
	NEW_PAD_CTRL(MX6PAD(GPIO_0__CCM_CLKO1), OUTPUT_40OHM),	/* SGTL5000 sys_mclk */
#define GP_SGTL5000_MUTE	IMX_GPIO_NR(5, 4)
	NEW_PAD_CTRL(MX6PAD(EIM_A24__GPIO5_IO04), WEAK_PULLDN_OUTPUT),

	/* UART1  */
	NEW_PAD_CTRL(MX6PAD(SD3_DAT7__UART1_TX_DATA), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD3_DAT6__UART1_RX_DATA), UART_PAD_CTRL),

	/* UART2 for debug */
#ifndef CONFIG_SILENT_UART
	NEW_PAD_CTRL(MX6PAD(EIM_D26__UART2_TX_DATA), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D27__UART2_RX_DATA), UART_PAD_CTRL),
#else
	NEW_PAD_CTRL(MX6PAD(EIM_D26__GPIO3_IO26), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D27__GPIO3_IO27), UART_PAD_CTRL),
#endif
	/* UART3 - Broadcom Bluetooth*/
	NEW_PAD_CTRL(MX6PAD(EIM_D24__UART3_TX_DATA), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D25__UART3_RX_DATA), UART_PAD_CTRL),


	/* USBOTG - J3 */
	NEW_PAD_CTRL(MX6PAD(GPIO_1__USB_OTG_ID)	, WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(KEY_COL4__USB_OTG_OC), WEAK_PULLUP),
#define GP_USB_OTG_PWR		IMX_GPIO_NR(3, 22)
	NEW_PAD_CTRL(MX6PAD(EIM_D22__GPIO3_IO22), WEAK_PULLDN_OUTPUT),

	/* USDHC3 - FULL sd */
	NEW_PAD_CTRL(MX6PAD(SD3_CLK__SD3_CLK), USDHC_CLK_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD3_CMD__SD3_CMD), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD3_DAT0__SD3_DATA0), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD3_DAT1__SD3_DATA1), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD3_DAT2__SD3_DATA2), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD3_DAT3__SD3_DATA3), USDHC_PAD_CTRL),
#define GP_SD3_CD	IMX_GPIO_NR(7, 0)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT5__GPIO7_IO00), WEAK_PULLUP),
#define GP_SD3_WP	IMX_GPIO_NR(7, 1)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT4__GPIO7_IO01), WEAK_PULLUP),

	/* USDHC4 - eMMC */
	NEW_PAD_CTRL(MX6PAD(SD4_CLK__SD4_CLK), USDHC_CLK_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_CMD__SD4_CMD), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT0__SD4_DATA0), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT1__SD4_DATA1), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT2__SD4_DATA2), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT3__SD4_DATA3), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT4__SD4_DATA4), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT5__SD4_DATA5), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT6__SD4_DATA6), USDHC_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(SD4_DAT7__SD4_DATA7), USDHC_PAD_CTRL),
#define GP_EMMC_RESET	IMX_GPIO_NR(2, 7)
	NEW_PAD_CTRL(MX6PAD(NANDF_D7__GPIO2_IO07), OUTPUT_40OHM),
};

static const iomux_v3_cfg_t MX6NAME(enet_pads1)[] = {
	/* pin 35 - 1 (PHY_AD2) on reset */
	NEW_PAD_CTRL(MX6PAD(RGMII_RXC__GPIO6_IO30), OUTPUT_40OHM),
	/* pin 32 - 1 - (MODE0) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD0__GPIO6_IO25), OUTPUT_40OHM),
	/* pin 31 - 1 - (MODE1) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD1__GPIO6_IO27), OUTPUT_40OHM),
	/* pin 28 - 1 - (MODE2) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD2__GPIO6_IO28), OUTPUT_40OHM),
	/* pin 27 - 1 - (MODE3) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD3__GPIO6_IO29), OUTPUT_40OHM),
	/* pin 33 - 1 - (CLK125_EN) 125Mhz clockout enabled */
	NEW_PAD_CTRL(MX6PAD(RGMII_RX_CTL__GPIO6_IO24), OUTPUT_40OHM),
};

static const iomux_v3_cfg_t MX6NAME(enet_pads2)[] = {
	NEW_PAD_CTRL(MX6PAD(RGMII_RXC__RGMII_RXC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD0__RGMII_RD0), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD1__RGMII_RD1), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD2__RGMII_RD2), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD3__RGMII_RD3), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RX_CTL__RGMII_RX_CTL), ENET_PAD_CTRL),
};

#if defined(CONFIG_VIDEO_IPUV3)
static const iomux_v3_cfg_t MX6NAME(rgb_pads)[] = {
	MX6PAD(DI0_DISP_CLK__IPU1_DI0_DISP_CLK),
	MX6PAD(DI0_PIN15__IPU1_DI0_PIN15),	/* DRDY */
	MX6PAD(DI0_PIN2__IPU1_DI0_PIN02),	/* HSYNC */
	MX6PAD(DI0_PIN3__IPU1_DI0_PIN03),	/* VSYNC */
	MX6PAD(DI0_PIN4__GPIO4_IO20),		/* Contrast */
	MX6PAD(DISP0_DAT0__IPU1_DISP0_DATA00),
	MX6PAD(DISP0_DAT1__IPU1_DISP0_DATA01),
	MX6PAD(DISP0_DAT2__IPU1_DISP0_DATA02),
	MX6PAD(DISP0_DAT3__IPU1_DISP0_DATA03),
	MX6PAD(DISP0_DAT4__IPU1_DISP0_DATA04),
	MX6PAD(DISP0_DAT5__IPU1_DISP0_DATA05),
	MX6PAD(DISP0_DAT6__IPU1_DISP0_DATA06),
	MX6PAD(DISP0_DAT7__IPU1_DISP0_DATA07),
	MX6PAD(DISP0_DAT8__IPU1_DISP0_DATA08),
	MX6PAD(DISP0_DAT9__IPU1_DISP0_DATA09),
	MX6PAD(DISP0_DAT10__IPU1_DISP0_DATA10),
	MX6PAD(DISP0_DAT11__IPU1_DISP0_DATA11),
	MX6PAD(DISP0_DAT12__IPU1_DISP0_DATA12),
	MX6PAD(DISP0_DAT13__IPU1_DISP0_DATA13),
	MX6PAD(DISP0_DAT14__IPU1_DISP0_DATA14),
	MX6PAD(DISP0_DAT15__IPU1_DISP0_DATA15),
	MX6PAD(DISP0_DAT16__IPU1_DISP0_DATA16),
	MX6PAD(DISP0_DAT17__IPU1_DISP0_DATA17),
	MX6PAD(DISP0_DAT18__IPU1_DISP0_DATA18),
	MX6PAD(DISP0_DAT19__IPU1_DISP0_DATA19),
	MX6PAD(DISP0_DAT20__IPU1_DISP0_DATA20),
	MX6PAD(DISP0_DAT21__IPU1_DISP0_DATA21),
	MX6PAD(DISP0_DAT22__IPU1_DISP0_DATA22),
	MX6PAD(DISP0_DAT23__IPU1_DISP0_DATA23),
};
#endif

/*
 *
 */
#define PC I2C_PAD_CTRL

static struct i2c_pads_info MX6NAME(i2c_pad_info)[] = {
{
	/* I2C1, SGTL5000, RTC */
	.scl = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(EIM_D21__I2C1_SCL), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(EIM_D21__GPIO3_IO21), PC),
		.gp = IMX_GPIO_NR(3, 21)
	},
	.sda = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(EIM_D28__I2C1_SDA), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(EIM_D28__GPIO3_IO28), PC),
		.gp = IMX_GPIO_NR(3, 28)
	}
}, {
	/* I2C2 - hdmi */
	.scl = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(KEY_COL3__I2C2_SCL), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(KEY_COL3__GPIO4_IO12), PC),
		.gp = IMX_GPIO_NR(4, 12)
	},
	.sda = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(KEY_ROW3__I2C2_SDA), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(KEY_ROW3__GPIO4_IO13), PC),
		.gp = IMX_GPIO_NR(4, 13)
	}
}, {
	/* I2C3, Charger, PCIe */
	.scl = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(GPIO_5__I2C3_SCL), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(GPIO_5__GPIO1_IO05), PC),
		.gp = IMX_GPIO_NR(1, 5)
	},
	.sda = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(GPIO_16__I2C3_SDA), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(GPIO_16__GPIO7_IO11), PC),
		.gp = IMX_GPIO_NR(7, 11)
	}
}
};
